# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        begin = head
        for i in range(k-1):
            begin = begin.next
        
        end = fast = head
        for i in range(k):
            fast = fast.next

        while fast:
            end = end.next
            fast = fast.next

        begin.val, end.val = end.val, begin.val
        return head
        # current = head
        # storeValue = []
        # while current:
        #     storeValue.append(current.val)
        #     current = current.next

        # fromStart, fromEnd = storeValue[k-1], storeValue[-k]
        # storeValue[k-1], storeValue[-k] = fromEnd, fromStart

        # result = None
        # if len(storeValue) == 1: result = ListNode(storeValue[0])
        # elif len(storeValue):
        #     tempResult = ListNode()
        #     result = tempResult
        #     for i in range(len(storeValue) - 1):
        #         tempResult.val = storeValue[i]
        #         tempResult.next = ListNode(storeValue[i+1])
        #         tempResult = tempResult.next 

        # return result
        
